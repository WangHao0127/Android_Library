apply plugin: 'com.android.application'

def releaseTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("GMT+08"))
}

def apkFileName(variant, versionName) {
    return "${rootProject.name}-${variant.flavorName}-${variant.buildType.name}-v${versionName}-${releaseTime()}.apk"
}

android {
    compileSdkVersion COMPILE_SDK_VERSION
    buildToolsVersion BUILD_TOOLS_VERSION

    defaultConfig {
        applicationId "com.android.library"
        minSdkVersion MIN_SDK_VERSION
        targetSdkVersion TARGET_SDK_VERSION
        versionCode VERSION_CODE
        versionName VERSION_NAME
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        //butterKnife引发的error
        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
            }
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { //output ->
            if (variant.buildType.name == "debug" && variant.flavorName == "staging") {
                return
            }
            outputFileName = apkFileName(variant, defaultConfig.versionName)
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            matchingFallbacks = ['release']
        }
        debug {
            minifyEnabled false
            applicationIdSuffix = ".debug"
            matchingFallbacks = ['debug', 'release']
        }

        // 开发环境
        stagingDebug{
            initWith debug

            // API基地址
            buildConfigField("String", "BASE_URL", "\"http://${config.APP_BASE_URL}/data/sk/\"")
        }

        stagingRelease{
            initWith release

            // API基地址
            buildConfigField("String", "BASE_URL", "\"http://${config.APP_BASE_URL}/data/sk/\"")
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':baselibrary')

}
