apply plugin: 'com.android.application'
def configs = rootProject.ext.android //android配置

def RELEASE_KEY_ALIAS = ''
def RELEASE_KEY_PWD = ''
def RELEASE_KEY_STORE_FILE_PATH = ''
def RELEASE_KEY_STORE_PWD = ''

static def releaseTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("GMT+08"))
}

def apkFileName(variant, versionName) {
    return "${rootProject.name}-${variant.flavorName}-${variant.buildType.name}-v${versionName}-${releaseTime()}.apk"
}

task loadSignConfig {
    File keystorePropertyFile = new File(rootDir.getAbsolutePath() + "/keystore.properties")
    if (keystorePropertyFile.exists()) {
        Properties properties = new Properties()
        properties.load(keystorePropertyFile.newDataInputStream())

        RELEASE_KEY_ALIAS = properties.getProperty('RELEASE_KEY_ALIAS')
        RELEASE_KEY_PWD = properties.getProperty('RELEASE_KEY_PWD')
        RELEASE_KEY_STORE_FILE_PATH = rootDir.getAbsolutePath() + properties.getProperty('RELEASE_KEY_STORE_FILE_PATH')
        RELEASE_KEY_STORE_PWD = properties.getProperty('RELEASE_KEY_STORE_PWD')
    } else {
        RELEASE_KEY_ALIAS = System.getenv('RELEASE_KEY_ALIAS')
        RELEASE_KEY_PWD = System.getenv('RELEASE_KEY_PWD')
        RELEASE_KEY_STORE_FILE_PATH = System.getenv('RELEASE_KEY_STORE_FILE_PATH')
        RELEASE_KEY_STORE_PWD = System.getenv('RELEASE_KEY_STORE_PWD')
    }
}

android {
    compileSdkVersion configs.compileSdkVersion
    buildToolsVersion configs.buildToolsVersion

    defaultConfig {
        applicationId "com.android.library"
        minSdkVersion configs.minSdkVersion
        targetSdkVersion configs.targetSdkVersion
        versionCode configs.versionCode
        versionName configs.versionName
        multiDexEnabled true
        //butterKnife引发的error
        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
            }
        }
        ndk {
            //设置支持的SO库架构
            abiFilters "armeabi", "armeabi-v7a", "arm64-v8a", "x86", "arm64-v8a", "x86_64"
        }
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug {
            keyAlias "AndroidLibrary"
            keyPassword "android"
            storeFile file("../keystore/debug.jks")
            storePassword "123456"
        }
        release {
            loadSignConfig
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PWD
            storeFile file("../keystore/LibraryKey.jks")
            storePassword RELEASE_KEY_STORE_PWD
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { //output ->
            if (variant.buildType.name == "debug" && variant.flavorName == "staging") {
                return
            }
            outputFileName = apkFileName(variant, defaultConfig.versionName)
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../proguard-project.txt'
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            proguardFiles fileTree(dir: '../proguards', include: ['*.pro']).asList().toArray()

            signingConfig signingConfigs.release
            matchingFallbacks = ['release']
        }
        debug {
            minifyEnabled false
            applicationIdSuffix = ".debug"
            matchingFallbacks = ['debug', 'release']
        }

        // 开发环境
        stagingDebug {
            initWith debug

            // API基地址
            buildConfigField("String", "BASE_URL", "\"http://${config.APP_BASE_URL}/data/sk/\"")
        }

        stagingRelease {
            initWith release

            // API基地址
            buildConfigField("String", "BASE_URL", "\"http://${config.APP_BASE_URL}/data/sk/\"")
        }
    }

    flavorDimensions "env"
    productFlavors {
        // 开发
        develop {}
        // 官网
//        offical {}
    }

    // 渠道号
    productFlavors.all { flavor ->
        flavor.manifestPlaceholders = [APP_CHANNEL_VALUE: name]
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    api project(':baselibrary')
    /*高德地图---定位*/
    implementation 'com.amap.api:location:latest.integration'
    /*高德地图---搜索*/
    //    implementation 'com.amap.api:search:latest.integration'
    /*高德地图---导航*/
    //    implementation 'com.amap.api:navi-3dmap:latest.integration'
    /*高德地图---2D地图*/
    //    implementation 'com.amap.api:map2d:latest.integration'
    /*高德地图---3D地图*/
    implementation 'com.amap.api:3dmap:latest.integration'
}
